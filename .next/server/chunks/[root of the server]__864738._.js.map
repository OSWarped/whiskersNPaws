{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/jwt.ts"],"sourcesContent":["// lib/jwt.ts\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret'; // Store securely in .env\n\nexport function signJwt(payload: object, expiresIn = '7d') {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn });\n}\n"],"names":[],"mappings":"AAAA,aAAa;;;;AACb;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI,eAAe,yBAAyB;AAE9E,SAAS,QAAQ,OAAe,EAAE,YAAY,IAAI;IACvD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE;IAAU;AACnD"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma'; // Adjust the path as needed\nimport bcrypt from 'bcrypt';\nimport { signJwt } from '@/lib/jwt';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Parse the request body\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      addressLine1,\n      addressLine2,\n      city,\n      state,\n      zip,\n      phone,\n    } = await request.json();\n\n    // Validate input\n    if (!firstName || !lastName || !email || !password || !addressLine1 || !city || !state || !zip) {\n      return NextResponse.json(\n        { message: 'All required fields must be provided.' },\n        { status: 400 }\n      );\n    }\n\n    // Check if the email is already registered\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n    if (existingUser) {\n      return NextResponse.json(\n        { message: 'Email is already registered.' },\n        { status: 400 }\n      );\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create a new user\n    const newUser = await prisma.user.create({\n      data: {\n        firstName,\n        lastName,\n        email,\n        password: hashedPassword,\n        phone: phone || null,\n        addressLine1,\n        addressLine2: addressLine2 || null,\n        city,\n        state,\n        zip,\n      },\n    });\n\n    // ✅ Generate a token\n    const token = signJwt({ id: newUser.id, email: newUser.email });\n\n    // ✅ Return success response with token\n    return NextResponse.json(\n      {\n        message: 'User registered successfully!',\n        user: { id: newUser.id, email: newUser.email },\n        token,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Error registering user:', error);\n    return NextResponse.json(\n      { message: 'Internal server error.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA,gMAAmC,4BAA4B;AAC/D;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,yBAAyB;QACzB,MAAM,EACJ,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,YAAY,EACZ,YAAY,EACZ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,KAAK,EACN,GAAG,MAAM,QAAQ,IAAI;QAEtB,iBAAiB;QACjB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK;YAC9F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAwC,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,2CAA2C;QAC3C,MAAM,eAAe,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QACA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA+B,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,oBAAoB;QACpB,MAAM,UAAU,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ;gBACA;gBACA;gBACA,UAAU;gBACV,OAAO,SAAS;gBAChB;gBACA,cAAc,gBAAgB;gBAC9B;gBACA;gBACA;YACF;QACF;QAEA,qBAAqB;QACrB,MAAM,QAAQ,CAAA,GAAA,4GAAA,CAAA,UAAO,AAAD,EAAE;YAAE,IAAI,QAAQ,EAAE;YAAE,OAAO,QAAQ,KAAK;QAAC;QAE7D,uCAAuC;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;gBAAE,IAAI,QAAQ,EAAE;gBAAE,OAAO,QAAQ,KAAK;YAAC;YAC7C;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAyB,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}