{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/pets/me/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma'; // Ensure Prisma is set up properly\nimport jwt from 'jsonwebtoken'; // Ensure jsonwebtoken is installed\n\nexport async function GET(request: Request) {\n  try {\n    // Extract Authorization header\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Missing Authorization header.' },\n        { status: 401 }\n      );\n    }\n\n    // Extract the token from the header\n    const token = authHeader.split('Bearer ')[1];\n    if (!token) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Invalid Authorization header format.' },\n        { status: 401 }\n      );\n    }\n\n    // Access JWT_SECRET from the environment variables\n    const JWT_SECRET = process.env.JWT_SECRET;\n    if (!JWT_SECRET) {\n      console.error('JWT_SECRET is not defined in the environment variables.');\n      return NextResponse.json(\n        { message: 'Internal server error.' },\n        { status: 500 }\n      );\n    }\n\n    // Verify and decode the JWT\n    let decodedToken;\n    try {\n      decodedToken = jwt.verify(token, JWT_SECRET) as { id: number; email: string };\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return NextResponse.json(\n        { message: 'Unauthorized. Invalid or expired token.' },\n        { status: 401 }\n      );\n    }\n\n    // Extract user ID from the decoded token\n    const userId = decodedToken.id;\n    if (!userId) {\n      return NextResponse.json(\n        { message: 'Unauthorized. User ID not found in token.' },\n        { status: 401 }\n      );\n    }\n\n    // Fetch pets associated with the user\n    const pets = await prisma.pet.findMany({\n      where: { userId },\n      select: {\n        id: true,\n        name: true,\n        type: true,\n        breed: true,\n        specialNeeds: true,\n      },\n    });\n\n    return NextResponse.json(pets);\n  } catch (error) {\n    console.error('Error fetching pets:', error);\n    return NextResponse.json(\n      { message: 'Internal server error.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA,gMAAmC,mCAAmC;AACtE,6OAAgC,mCAAmC;;;;AAE5D,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,+BAA+B;QAC/B,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA8C,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,QAAQ,WAAW,KAAK,CAAC,UAAU,CAAC,EAAE;QAC5C,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAqD,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,mDAAmD;QACnD,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;QACzC,IAAI,CAAC,YAAY;YACf,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAyB,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,4BAA4B;QAC5B,IAAI;QACJ,IAAI;YACF,eAAe,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QACnC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,MAAM,SAAS,aAAa,EAAE;QAC9B,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA4C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;YACrC,OAAO;gBAAE;YAAO;YAChB,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,OAAO;gBACP,cAAc;YAChB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAyB,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}