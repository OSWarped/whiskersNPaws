{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    // Validate request payload\n    if (!email || !password) {\n      console.error('Missing email or password.');\n      return NextResponse.json(\n        { message: 'Email and password are required.' },\n        { status: 400 }\n      );\n    }\n\n    // Find the user in the database\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      console.error(`User with email ${email} not found.`);\n      return NextResponse.json(\n        { message: 'Invalid email or password.' },\n        { status: 401 }\n      );\n    }\n\n    // Compare the provided password with the stored hashed password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      console.error('Invalid password.');\n      return NextResponse.json(\n        { message: 'Invalid email or password.' },\n        { status: 401 }\n      );\n    }\n\n    // Debug: Check if JWT_SECRET is defined\n    if (!process.env.JWT_SECRET) {\n      console.error('JWT_SECRET is not defined in the environment variables.');\n      return NextResponse.json(\n        { message: 'Server misconfiguration. Contact support.' },\n        { status: 500 }\n      );\n    }\n\n    // Create a JWT payload\n    const payload = {\n      id: user.id,\n      email: user.email,\n    };\n\n    console.log('JWT payload:', payload);\n\n    // Sign the JWT\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\n      expiresIn: '2h',\n    });\n\n    // Respond with the token\n    return NextResponse.json({ token }, { status: 200 });\n  } catch (error) {\n    console.error('Error during login:', error);\n    return NextResponse.json({ message: 'Internal server error.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,2BAA2B;QAC3B,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAmC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,MAAM,WAAW,CAAC;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA6B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gEAAgE;QAChE,MAAM,kBAAkB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YACpB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA6B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,EAAE;YAC3B,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA4C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,UAAU;YACd,IAAI,KAAK,EAAE;YACX,OAAO,KAAK,KAAK;QACnB;QAEA,QAAQ,GAAG,CAAC,gBAAgB;QAE5B,eAAe;QACf,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,QAAQ,GAAG,CAAC,UAAU,EAAE;YACtD,WAAW;QACb;QAEA,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM,GAAG;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}