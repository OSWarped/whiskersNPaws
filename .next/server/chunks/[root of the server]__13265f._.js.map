{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/reservations/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\n\ninterface DecodedToken {\n  id: number;\n  email: string;\n  iat: number;\n  exp: number;\n}\n\ntype Pet = {\n  id: number;\n  name: string;\n  type: string;\n  breed?: string;\n  specialNeeds?: string;\n};\n\n\n// GET handler\nexport async function GET(request: NextRequest) {\n  try {\n    // Extract token from headers\n    const authHeader = request.headers.get('Authorization');\n    const token = authHeader?.split('Bearer ')[1];\n\n    if (!token) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Missing token.' },\n        { status: 401 }\n      );\n    }\n\n    // Verify the token and extract user ID\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;\n    const userId = decoded.id;\n\n    if (!userId) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Invalid token.' },\n        { status: 401 }\n      );\n    }\n\n    // Fetch reservations for the user\n    const reservations = await prisma.reservation.findMany({\n      where: { userId },\n      include: {\n        details: true,\n        pets: true, // Include related pets\n      },\n    });\n\n    return NextResponse.json(reservations, { status: 200 });\n  } catch (error) {\n    console.error('Error fetching reservations:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch reservations' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST handler\n// POST handler\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    const token = authHeader?.split('Bearer ')[1];\n\n    if (!token) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Missing token.' },\n        { status: 401 }\n      );\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;\n    const userId = decoded.id;\n\n    if (!userId) {\n      return NextResponse.json(\n        { message: 'Unauthorized. Invalid token.' },\n        { status: 401 }\n      );\n    }\n\n    const { bookings }: { bookings: { startDate: string; totalCost: number; service: number; addOns: number[]; pets: Pet[] }[] } = await request.json();\n\n    if (!bookings || !Array.isArray(bookings) || bookings.length === 0) {\n      return NextResponse.json(\n        { message: 'No bookings provided or invalid format.' },\n        { status: 400 }\n      );\n    }\n\n    const availableAddOns = await prisma.addOn.findMany();\n\n    const createdReservations = await Promise.all(\n      bookings.map(async (booking) => {\n        if (!booking.startDate || !booking.totalCost || !booking.service) {\n          throw new Error('Invalid booking data');\n        }\n\n        const petIds = booking.pets.map((pet) => pet.id);\n\n        const reservation = await prisma.reservation.create({\n          data: {\n            userId,\n            totalPrice: booking.totalCost,\n            startDate: new Date(booking.startDate),\n            endDate: new Date(booking.startDate),\n            pets: {\n              connect: petIds.map((id) => ({ id })),\n            },\n            status: 'Confirmed',\n          },\n        });\n\n        const detailsData = [\n          {\n            reservationId: reservation.id,\n            serviceId: booking.service,\n            price: booking.totalCost,\n          },\n          ...booking.addOns.map((addOnId) => ({\n            reservationId: reservation.id,\n            addOnId,\n            price: availableAddOns.find((a) => a.id === addOnId)?.price || 0,\n          })),\n        ];\n\n        await prisma.reservationDetail.createMany({\n          data: detailsData.map((detail) => ({\n            reservationId: detail.reservationId,\n            serviceId: 'serviceId' in detail ? detail.serviceId : undefined,\n            addOnId: 'addOnId' in detail ? detail.addOnId : undefined,\n            price: detail.price,\n          })),\n        });\n\n        return reservation;\n      })\n    );\n\n    return NextResponse.json(createdReservations, { status: 201 });\n  } catch (error: unknown) {\n    console.error('Error creating reservations:', error);\n    const message = error instanceof Error ? error.message : 'Internal server error.';\n    return NextResponse.json({ message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}