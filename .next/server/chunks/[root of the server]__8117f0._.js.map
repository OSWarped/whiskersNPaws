{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\n\ninterface DecodedToken {\n  id: number;\n  email: string;\n  iat: number;\n  exp: number;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // ✅ Use Authorization header first\n    const authHeader = request.headers.get('authorization');\n    let token: string | undefined;\n\n    if (authHeader?.startsWith('Bearer ')) {\n      token = authHeader.split(' ')[1];\n    } else {\n      // ✅ Only fallback to cookie if no header\n      token = request.cookies.get('authToken')?.value;\n    }\n\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized - No token found' }, { status: 401 });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;\n\n    const user = await prisma.user.findUnique({\n      where: { id: decoded.id },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        email: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json({ message: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return NextResponse.json({ message: 'Invalid or expired token' }, { status: 401 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AASO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,mCAAmC;QACnC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI;QAEJ,IAAI,YAAY,WAAW,YAAY;YACrC,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;QAClC,OAAO;YACL,yCAAyC;YACzC,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc;QAC5C;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;QAExD,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI,QAAQ,EAAE;YAAC;YACxB,QAAQ;gBACN,IAAI;gBACJ,WAAW;gBACX,UAAU;gBACV,OAAO;YACT;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACF"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}