{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'], // Optional: Logs Prisma queries in development\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/blakemilam/Projects/whiskersNPaws/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\n\ninterface DecodedToken {\n  id: number;\n  email: string;\n  iat: number; // Issued at\n  exp: number; // Expiration time\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    let token: string | undefined = request.cookies.get('authToken')?.value;\n\n    // Fallback to localStorage token if not found in cookies\n    if (!token) {\n      const storedToken = request.headers.get('x-access-token'); // Pass the token manually if needed\n      token = storedToken || undefined; // Ensure token is string or undefined\n    }\n\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;\n\n    const user = await prisma.user.findUnique({\n      where: { id: decoded.id },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        email: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json({ message: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AASO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,IAAI,QAA4B,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc;QAElE,yDAAyD;QACzD,IAAI,CAAC,OAAO;YACV,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB,oCAAoC;YAC/F,QAAQ,eAAe,WAAW,sCAAsC;QAC1E;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;QAExD,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI,QAAQ,EAAE;YAAC;YACxB,QAAQ;gBACN,IAAI;gBACJ,WAAW;gBACX,UAAU;gBACV,OAAO;YACT;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}