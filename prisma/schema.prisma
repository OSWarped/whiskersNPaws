generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // Ensure your .env file contains this variable
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  password     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zip          String
  latitude     Float?   // Geolocation for distance calculations
  longitude    Float?
  pets         Pet[]
  reservations Reservation[]
  pendingReservations PendingReservation[]
  isAdmin Boolean @default(false)
  isActive  Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Pet {
  id           Int      @id @default(autoincrement())
  userId       Int
  name         String
  type         String   // e.g., Dog, Cat
  breed        String?
  specialNeeds String?
  user         User     @relation(fields: [userId], references: [id])
  reservations Reservation[] @relation("ReservationPets")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id             Int      @id @default(autoincrement())
  name           String
  description    String
  basePricePerDay Float
  reservationDetails ReservationDetail[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AddOn {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  price        Float
  reservationDetails ReservationDetail[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Reservation {
  id            Int      @id @default(autoincrement())
  userId        Int
  totalPrice    Float
  startDate     DateTime
  endDate       DateTime
  distance      Float?   // Distance to user in miles/km
  proximityGroup Int?    // For grouping reservations by proximity
  status        String   @default("Pending") // e.g., Pending, Confirmed
  user          User     @relation(fields: [userId], references: [id])
  details       ReservationDetail[]
  pets          Pet[]     @relation("ReservationPets")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ReservationDetail {
  id            Int      @id @default(autoincrement())
  reservationId Int
  serviceId     Int?
  addOnId       Int?
  price         Float
  quantity      Int      @default(1)
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  service       Service? @relation(fields: [serviceId], references: [id])
  addOn         AddOn?   @relation(fields: [addOnId], references: [id])
}

model PendingReservation {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  data      Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  bookings  String   
}


model TravelCost {
  id           Int      @id @default(autoincrement())
  minDistance  Float
  maxDistance  Float
  price        Float
}

model ServiceProvider {
  id        Int      @id @default(autoincrement())
  address   String
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt
}
